# -*- coding: utf-8 -*-
"""Breast Cancer Prediction Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ykg4ZDLwH2lNIXAD-RsYN5O0raFtmFra
"""

#importing the required libraries that are numpy(to read arrays), pandas(for data processing and reading dataset), matplotlib for visulizations
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#connecting the colab file to google drive
from google.colab import drive
drive.mount('/content/gdrive')
root_path = 'gdrive/My Drive/'

#reading the csv dataset through pandas
cancer=pd.read_csv('gdrive/My Drive/breastcancer.csv')

#.shape helps us to understand the file and tells us the rows and columns of the file
cancer.shape

#.head() function gives us the top 5 rows
cancer.head()

#.tail() gives us the bottom 5 rows
cancer.tail()

#.describes() functions gives us the values of various statistical functions of the numerical data in the file
cancer.describe()

#.isnull() tells us about the various null values or 0 in the dataset and .isnull().sum() gives us the sum of null values or 0
cancer.isnull().sum()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import seaborn as sns

sns.heatmap(cancer.corr())

cancer.plot.scatter(x="Regional Node Examined",y="Reginol Node Positive", cmap='coolwarm')
cancer.plot.scatter(x="Tumor Size",y="Reginol Node Positive", cmap='coolwarm')
cancer.plot.scatter(x="Regional Node Examined",y="Reginol Node Positive", c="Tumor Size", cmap='coolwarm')

plt.style.use('ggplot')
cancer['Age'].hist()

plt.style.use('dark_background')
cancer['Tumor Size'].hist()

cancer

#DROPING THE COLUMNS WITH STRINGS VALUES THAT ARE NOT REQUIRED FOR THE PREDICTIONS
drop_columns = ['Race',	'Marital Status',	'N Stage',	'6th Stage',	'differentiate',	'A Stage','Estrogen Status',	'Progesterone Status']
Cancer = cancer.drop(drop_columns, axis=1)

Cancer

#.iloc[] helps us to segregate the data, over here x = Cancer.iloc[:, :6] means that all the rows and all the columns except for the th column
#y = Cancer.iloc[:, 6] means all the rows and just the 6th column.
x = Cancer.iloc[:, :6]
y = Cancer.iloc[:, 6]

x

y

#we are importing LableEncoder from sckit learn library from sub module preprocessing to help us encode the y column of Status
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)

y

#This code prints out the entire list.
print(*y)

#From Sckit learn library and sub module model_selection we are importing train_test_split which will help to split the data into train and test.
from sklearn.model_selection import train_test_split
#from sklearn and submodule preprocessing we are importing StandardScaler
from sklearn.preprocessing import StandardScaler
#from submodule neighbors we are importing KNeighborsClassifier which is the machine learning model that will help us create the prediction module
from sklearn.neighbors import KNeighborsClassifier
#from submodule metrics we are importing accuracy_score whihc will help to print the accuracy of the predictions made by knn
from sklearn.metrics import accuracy_score

#here we are taking a test size of 15% and train size of 75%
x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=1, test_size = 0.15)

#print(len()) helps to print the lenght
print(len(x_train))
print(len(y_train))
print(len(x_test))
print(len(y_test))

x_train

x_test

y_train

y_test

#we are fitting the model, to x_train and y_train, keeping the neighbors at 20 which means that it will look to its next 20 neighbors.
classifier = KNeighborsClassifier(n_neighbors = 20, p = 2, metric = 'euclidean')
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

y_pred

print(accuracy_score(y_test, y_pred))

#from sckit learn we are importing liner_model to do linear regression and predict the survival months
from sklearn import linear_model
reg = linear_model.LinearRegression()

#dropping Status column as it is not required
cancer_reg = Cancer.drop('Status', axis=1)

cancer_reg= cancer_reg.rename(columns={'Survival Months': 'survival_months'})

cancer_reg

x=cancer_reg.iloc[:, :-1]
y=cancer_reg.iloc[:, -1]

x

y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=1, test_size = 0.10)

x_train

x_test

y_train

y_test

cancer_reg

reg.fit(x_train, y_train)

reg.intercept_

y_pred=reg.predict(x_test)

from sklearn.metrics import r2_score
r2=r2_score(y_test, y_pred)
print(r2)

pip install lifelines

from lifelines import CoxPHFitter
cph = CoxPHFitter()

cancer = cancer.rename(columns={'Tumor Size': 'Tumor_Size'})

cph.fit(cancer, duration_col='Survival Months', event_col='Tumor_Size', formula= 'Age + Grade + Status')

cph.print_summary()

cph.plot()